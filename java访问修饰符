写在前面：
public、protected和private这几个java访问权限修饰词在使用时，是置于类中每个成员的定义之前的，无论它是一个域还是一个方法。每个访问权限修饰词仅控制它所修饰的特定定义的访问权。如果不提供任何访问权限修饰词，则意味着它是“包访问权限”。因此，无论如何，所有事物都具有某种形式的访问权限控制。

包访问权限：
默认访问权限没有任何关键字，但通常是指包访问权限（有时也表示成为friendly）。这就意味着当前的包中的所有其他类对那个成员都有访问权限，但对这个包之外的所有类，这个成员确实private。由于一个编译单元（即一个文件）只能隶属于一个包，所以经由包访问权限，处于同一个编译单元中的所有类彼此间是自动可访问的。包访问权限允许将包内所有相关的类组合起来，以使它们彼此之间可以轻松地相互作用。当把类组织起来放进一个包之内的时候，也就给它们的包访问权限的成员赋予了相互访问的权限，当你“拥有“了该包内的程序代码。“只有你拥有的程序代码才可以访问你所拥有的其他程序代码“。应该说，包访问权限为把类群聚在一个包中的做法提供了意义和理由。在许多语言中，在文件内组织定义的方式是任意的，但在java中，则要强制你以一种合理的方式对它们加以组织。另外，你可能还想要删除这样的类，它们不应该访问在当前包中所定义的类。

public：接口访问权限：
使用关键字public，就意味着public之后紧跟着的成员声明自己对每个人都是有用的，尤其是使用类库的客户程序员更是如此。

private：你无法访问：
关键字private的意思是，除了包含该成员的类之外，其他任何类都无法访问这个成员。由于处于同一个包内的其他类是不可以访问private成员的，因此这等于说是自己隔离了自己。从另一方面说，让许多人共同合作来创建一个包也是不大可能的，为此private就允许你随意更改该成员，而不必考虑这样做是否会影响到包内其他的类。默认的包访问权限通常已经提供了充足的隐藏措施。请记住，使用类的客户端程序员是无法访问包访问权限成员的。这样做很好，因为默认访问权限是一种我们常用的权限，同时也是一种在忘记添加任何访问权限控制时能够自动得到的权限。因此，通常考虑的是，哪些成员是想要明确公开给客户端程序员使用的，从而将他们声明为public，而在最初，你可能不会认为自己经常会需要使用关键字private，因为没有它，照样可以工作。然而，事实很快就会证明，对private的使用是多么的重要，在多线程环境下更是如此。

protected：继承访问权限：
关键字protected处理的是继承的概念，通过继承可以利用一个现有类，我们将其称为基类，然后将新成员添加到该现有类中而不必碰该现有类。还可以改变类的现有成员的行为。如果创建了一个新包，并自另一个包中继承类，那么唯一可以访问的成员就是源包的public成员。有时，基类别的创建者会希望有某个特定成员，把对它的访问权限赋予派生类而不是所有类。这就需要protected来完成这一工作。protected也提供包访问权限，也就是说，相同包内的其他类可以访问ptotected元素 .
